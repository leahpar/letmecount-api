security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
        in_memory:
            memory:
                users:
                    profiler:
                        password: '%env(PROFILER_PWD)%'
                        roles: 'ROLE_PROFILER'

    firewalls:
        dev:
            pattern: ^/(_(|wdt)|css|images|js)/
            security: false

        profiler:
            lazy: true
            pattern: ^/(_profiler)/
            provider: in_memory
            http_basic:
                realm: Secured Area

        api:
            pattern: ^/
            stateless: true
            provider: app_user_provider
            # JWT
            entry_point: jwt
            jwt: ~
            json_login:
                check_path: api_login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            refresh_jwt:
                check_path: api_refresh_token
            logout:
                path: api_token_invalidate

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
#        - { path: ^/$, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
        - { path: ^/docs, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI docs
#        - { path: ^/contexts, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI contexts
        - { path: ^/auth, roles: PUBLIC_ACCESS }
        - { path: ^/_profiler, roles: PUBLIC_ACCESS, ip: '%env(TRUSTED_IPS)%' }
        - { path: ^/_profiler, roles: ROLE_PROFILER }
        - { path: ^/, roles: IS_AUTHENTICATED_FULLY }
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
